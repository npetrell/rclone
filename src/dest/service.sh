#!/usr/bin/env sh
#
# Rclone service

# import DroboApps framework functions
. /etc/service.subr

framework_version="2.1"
name="rclone"
version="1.45"
description="Rclone is a command line program to sync files and directories to and from various cloud storage services"
depends=""
webui="WebUI"

prog_dir="$(dirname "$(realpath "${0}")")"
conffile="${prog_dir}/etc/rclone.conf"
tmp_dir="/tmp/DroboApps/${name}"

logfile="${tmp_dir}/log.txt"
statusfile="${tmp_dir}/status.txt"
errorfile="${tmp_dir}/error.txt"

certfile="${prog_dir}/etc/ssl/certs/ca-certificates.crt"


is_running() {
  # Custom check, because complexapp has several background processes,
  # or must make sure kernel modules are loaded,
  # or some mount point is present.
  # Any part not running causes a return 1.
  return 0
}

is_stopped() {
  # Reverse of is_running, but here any part still running causes return 1.
  return 0
}

start() {
  # Check that every part is individually running.
  # This function, when completed successfully, should bring the DroboApp to a
  # fully operational state.
  # If errors are found, report them through statusfile and errorfile, as well
  # as messages to stderr.

  if [ ! -f "$conffile" ]; then
    echo "No config file found at $conffile - exiting." > "${statusfile}"
    echo "3" > "${errorfile}"
    return 1
  fi

  export SSL_CERT_FILE="${certfile}"

  echo "This goes to logfile"
  echo "This goes to logfile" >&2
  echo "This goes to stdout" >&3
  echo "This goes to stderr" >&4
  return 0
}

stop() {
  # Check that every part is individually stopped.
  # This function, when completed successfully, should notify the DroboApp to
  # shutdown completely, but gracefully.
  # Return 0 if successful.
  return 0
}

force_stop() {
  # Force the stop of all DroboApp parts.
  # This includes SIGKILLing processes, force unmounting, etc, by any means
  # necessary to stop an unresponsive DroboApp.

  # Return 0 if successful.
  return 0
}

reload() {
  # Reload advancedapp configuration
  return 0
}

# ensure log folder exists
if [ ! -d "${tmp_dir}" ]; then mkdir -p "${tmp_dir}"; fi
# redirect all output to logfile
exec 3>&1 4>&2 1>> "${logfile}" 2>&1
# redirect the mandatory output, generated by service.subr
STDOUT=">&3"
STDERR=">&4"
# log current date, time, and invocation parameters
echo "$(date +"%Y-%m-%d %H-%M-%S"):" "${0}" "${@}"
# script hardening
set -o errexit  # exit on uncaught error code
set -o nounset  # exit on unset variable
set -o xtrace   # enable script tracing

main "$@"
